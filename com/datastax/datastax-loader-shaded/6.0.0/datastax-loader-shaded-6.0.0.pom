<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.datastax</groupId>
    <artifactId>datastax-loader-shaded</artifactId>
    <version>6.0.0</version>

    <properties>
        <github.global.server>github</github.global.server>
    </properties>

    <build>
        <plugins>
            <!-- Maven github -->
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <configuration>
                    <!-- GitHub提交的信息 -->
                    <message>Maven artifacts dse-graph-graph for ${project.version}</message>
                    <!--提交的目录-->
                    <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
                    <!--将被更新为提交的分支ref, 其中master为GitHub提交的角色-->
                    <branch>refs/heads/master</branch>
                    <!--子元素将被视为从outputDirectory中包含的模式-->
                    <includes>
                        <include>**</include>
                    </includes>
                    <!-- <path>com.sinobest.kshfx</path>-->
                    <!-- 是否与当前树合并，或者完全替换提交指向的树, 默认为false-->
                    <merge>true</merge>
                    <!-- 是否强制进行一个ref更新，默认情况下只会快速前进 -->
                    <force>true</force>
                    <!-- 在该站点的根目录下是否总是创造一个.nojekyll文件将。如果您的站点包含任何以下划线开头的文件夹，那么该设置应该启用。-->
                    <noJekyll>true</noJekyll>
                    <!-- 对应github上创建的仓库名称 name -->
                    <repositoryName>maven-repo</repositoryName>
                    <!-- github 仓库所有者 -->
                    <repositoryOwner>v4liulv</repositoryOwner>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>site</goal>
                        </goals>
                        <phase>deploy</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- Maven deploy 结合上面的Maven-github将本地工程的部署到远程Maven Github仓库-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <configuration>
                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo
                    </altDeploymentRepository>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>