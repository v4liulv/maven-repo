<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tcfuture.akka</groupId>
    <artifactId>akka-hello</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>akka-hello</name>
    <url>https://gitlab.tcfuture.tech/liul/akka/akka-hello</url>
    <description>akka study hello word</description>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://gitlab.tcfuture.tech/liul/akka/akka-hello</url>
        <connection>https://gitlab.tcfuture.tech/liul/akka/akka-hello.git</connection>
    </scm>

    <developers>
        <developer>
            <name>liul</name>
            <id>liul</id>
            <email>liul@tcfuture.tech</email>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>+8</timezone>
        </developer>
    </developers>

    <modules>
        <module>akkahello-actor</module>
        <module>akkahello-remote</module>
    </modules>

    <properties>
        <github.global.server>github</github.global.server>
        <java.version>1.8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <lombok.version>1.18.12</lombok.version>
    </properties>

    <dependencies>
        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <profiles>
        <!-- 发布到github 激活方式：mvn deploy -Pgithub -->
        <profile>
            <id>github</id>
            <build>
                <plugins>
                    <!-- 编译插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven-compiler-plugin.version}</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <testSource>${java.version}</testSource>
                            <testTarget>${java.version}</testTarget>
                        </configuration>
                    </plugin>
                    <!-- Maven github -->
                    <plugin>
                        <groupId>com.github.github</groupId>
                        <artifactId>site-maven-plugin</artifactId>
                        <version>0.12</version>
                        <configuration>
                            <message>Maven artifacts for ${project.version}</message>
                            <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
                            <branch>refs/heads/master</branch>
                            <includes>
                                <include>**</include>
                            </includes>
                            <!-- <path>com.sinobest.kshfx</path>-->
                            <!-- 是否与当前树合并，或者完全替换提交指向的树, 默认为false-->
                            <merge>true</merge>
                            <!-- 是否强制进行一个ref更新，默认情况下只会快速前进 -->
                            <force>true</force>
                            <!-- 在该站点的根目录下是否总是创造一个.nojekyll文件将。如果您的站点包含任何以下划线开头的文件夹，那么该设置应该启用。-->
                            <noJekyll>true</noJekyll>
                            <!-- 对应github上创建的仓库名称 name -->
                            <repositoryName>maven-repo</repositoryName>
                            <!-- github 仓库所有者 -->
                            <repositoryOwner>v4liulv</repositoryOwner>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>site</goal>
                                </goals>
                                <phase>deploy</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- （根据github是否选择而选择）Maven deploy 结合上面的Maven-github将本地工程的部署到远程Maven Github仓库-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <version>2.8.2</version>
                        <configuration>
                            <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo
                            </altDeploymentRepository>
                        </configuration>
                    </plugin>
                    <!-- Maven 生成sources源码包的插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>3.0.1</version>
                        <configuration>
                            <attach>true</attach>
                        </configuration>
                        <executions>
                            <execution>
                                <id>create-source-jar</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                    <goal>test-jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Maven 生成javadoc文档包的插件，解决报错添加-Xdoclint:none-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>2.10.2</version>
                        <configuration>
                            <aggregate>true</aggregate>
                            <additionalparam>-Xdoclint:none</additionalparam>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Maven 生成全部的依赖包到target\lib目录下 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <id>copy-dependencies</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <!-- ${project.build.directory}为Maven内置变量，缺省为target -->
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                    <excludeTransitive>false</excludeTransitive><!-- excludeTransitive表示是否不包含间接依赖的包  -->
                                    <stripVersion>false</stripVersion><!-- stripVersion表示是否复制的jar文件去掉版本信息 -->
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- mvn clean命令清除target里的内容的同时，也清除work,checkpoint,lib_managed等下的相应目录 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>3.0.0</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>work</directory>
                                </fileset>
                                <fileset>
                                    <directory>checkpoint</directory>
                                </fileset>
                                <fileset>
                                    <directory>lib_managed</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- 本地使用 -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <build>
                <plugins>
                    <!-- 编译插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven-compiler-plugin.version}</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <testSource>${java.version}</testSource>
                            <testTarget>${java.version}</testTarget>
                        </configuration>
                    </plugin>
                    <!-- 编辑 MANIFEST.MF -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>${maven-jar-plugin.version}</version>
                        <configuration>
                            <archive>
                                <manifestEntries>
                                    <Implementation-Title>${project.artifactId}</Implementation-Title>
                                    <Implementation-Version>${project.version}</Implementation-Version>
                                </manifestEntries>
                            </archive>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>